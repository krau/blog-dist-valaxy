{
    "version": "https://jsonfeed.org/version/1",
    "title": "柯罗krau的博客 | krau's blog",
    "home_page_url": "https://krau.top/",
    "feed_url": "https://krau.top/feed.json",
    "description": "能写一辈子博客吗?",
    "icon": "https://krau.top/photo/avatar/avatar.jpg",
    "author": {
        "name": "Krau",
        "url": "https://valaxy.site"
    },
    "items": [
        {
            "id": "",
            "content_html": "<p><img src=\"https://pic.downk.cc/item/5f119a0214195aa59417256d.png\" alt=\"preview\"></p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/mmdray-basic-rendering",
            "title": "ray-mmd渲染基本流程",
            "date_modified": "2020-07-17T16:48:46.000Z",
            "date_published": "2024-06-11T12:43:18.554Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>如何使材质贴图更有层次感？</p>\n<p>这就需要制作相应的<a href=\"https://zh.wikipedia.org/wiki/%E6%B3%95%E7%BA%BF%E8%B4%B4%E5%9B%BE\">法线贴图</a></p>\n<p>本文以YYB式初音未来为例，制作相应的法线贴图，使用ray渲染的版本为1.5.2</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/mmdray-normal-map",
            "title": "ray-mmd制作法线贴图",
            "date_modified": "2021-08-13T08:59:08.000Z",
            "date_published": "2024-06-11T12:43:18.554Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>闲来无事在摸MMD，然后看到了这个</p>\n<p>[【PV背景配布/动作配布】九尾三妈式初音 - お気に召すまま<br>\n](<a href=\"https://www.bilibili.com/video/BV1r74\">https://www.bilibili.com/video/BV1r74</a></p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/mmdray-output-videos-with-alpha",
            "title": "MMD中导出带alpha通道视频的方法",
            "date_modified": "2020-04-07T20:33:29.000Z",
            "date_published": "2024-06-11T12:43:18.554Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>完成ray渲染的基本流程后，就要开始调各种参数了，本篇介绍ray渲染内置的几个天空盒的参数<br>\n![内置天空盒](<a href=\"https://cdn.jsdelivr.net/gh/voidoath/photo/b\">https://cdn.jsdelivr.net/gh/voidoath/photo/b</a></p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/mmdray-skyboxs",
            "title": "ray-mmd内置天空盒调整参数简介",
            "date_modified": "2021-08-12T19:57:39.000Z",
            "date_published": "2024-06-11T12:43:18.554Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>最近因疫情闲在家，就折腾起了自己的旧手机</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/old-phone-become-server",
            "title": "将旧手机通过Linuxdeploy改造为linux服务器搭建cloudreve个人网盘实现离线下载",
            "date_modified": "2022-01-24T19:34:31.000Z",
            "date_published": "2024-06-11T12:43:18.554Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>一年年来去匆匆，往事皆是云烟过眼，不做总结似乎像是虚度了一年时间。但想要写下的东西又太多，总结就不知不觉写成了流水账。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/summary-2020",
            "title": "2020年终总结",
            "date_modified": "2020-12-31T20:56:08.000Z",
            "date_published": "2024-06-11T12:43:18.554Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>之前我曾安利过 <a href=\"http://localhost:4859/posts/pasteimage-in-vs\">PasteImage</a> 这个插件，用 VSCode 写博客/文档的时候，用它可以很快捷地在md文档中插入图片。</p>\n<p>受某个友人影响，我也开始尝试 <s>拥抱 webp</s>了，近期的文章内的图片都已经压缩成了 webp 格式。但是 PasteImage 却不支持 webp 格式，于是我又想办法整出了今天这个解决方案，实现完全自动化的 压缩+插入图片。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/use-sharex-and-mdimage-for-efficiency/index",
            "title": "使用ShareX和Markdown Image自动压缩截图为WebP格式并一键插入Markdown文档",
            "date_modified": "2023-01-16T18:04:11.000Z",
            "date_published": "2024-06-11T12:43:18.554Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>Artitalk</h2>\n<p><a href=\"https://artitalk.js.org/\">Artitalk</a> 是一个基于 Leancloud 的简单说说 js，具体参见官方文档。</p>\n<p>我成功将它接入了我的博客，</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/add-artitalk-for-valaxy-yun",
            "title": "为 valaxy 博客 yun 主题添加 artitalk 说说页面",
            "date_modified": "2023-01-20T00:53:46.000Z",
            "date_published": "2024-06-11T12:43:18.546Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/gal-collection",
            "title": "简单汇总下那些推过的galgame（持续更新）",
            "date_modified": "2020-07-06T21:12:31.000Z",
            "date_published": "2024-06-11T12:43:18.546Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>::: warning 注意<br>\n本文章作于 valaxy 版本 0.12.2 , 部分内容可能已经过时 , 请结合<a href=\"https://valaxy.site/guide/getting-started\">官方文档</a>一起阅读<br>\n:::</p>\n<h2>前言</h2>\n<p>在 2022 年 8 月份，我向<a href=\"https://github.com/YunYouJun\">云游君</a>的 hexo 主题 <a href=\"https://github.com/YunYouJun/hexo-theme-yun\">hexo-theme-yun</a> 提 issue 的时候，他向我提到了 <a href=\"https://valaxy.site/\">valaxy</a> 这个由他开发的静态博客框架。当时 valaxy 十分先进的技术栈和一些优良特性一下就吸引了我，但是由于我已经使用 hexo 写了很多文章，且 valaxy 也没有迁移文档/工具，所以那时我并没有迁移。</p>\n<p>时隔半年，我再去看 valaxy 的时候，它已经基本可用了，文档虽然还是不完整，但是够用。于是我决定将我的 hexo 博客迁移至 valaxy。<s>hexo 这贼船越早下越好</s></p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/hexo-migrate-to-valaxy/index",
            "title": "将 hexo 博客迁移至 valaxy",
            "date_modified": "2023-01-16T09:56:55.000Z",
            "date_published": "2024-06-11T12:43:18.546Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>::: info<br>\n2024-01-14 更新:</p>\n<p>修复了一些错误, 删除了一些不必要的内容</p>\n<p>评论区有人建议建一个群组讨论: <a href=\"https://t.me/kmuachat\">@kmuachat</a></p>\n<p>本文只是我最初写 bot 时的一点笔记, 更建议你直接看 <a href=\"https://docs.python-telegram-bot.org\">Python-Telegram-Bot</a> 的文档<br>\n:::</p>\n<h2>前言</h2>\n<p><s>为了激发群友们水群的积极性，</s> 为了学习和应用 python 知识，我最近在开发一个 telegram 的 bot，所以写这篇文章以记录和分享</p>\n<p>在这篇文章中，将使用 <a href=\"https://docs.python-telegram-bot.org\">Python-Telegram-Bot</a> ，基于 Python 的异步特性与 Telegram 友好开放的 API，开发一个兼顾实用性和趣味的 bot ，并使用 Docker 在任何地方部署 bot</p>\n<p>Demo: <a href=\"https://github.com/krau/kmua-bot\">kmua-bot</a></p>\n<p>本文不是从零开始的教程，阅读本文前，你需要具有一点点(真的很少一点)的 python 或其他语言编程的基础。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/tg-bot-dev-note-kmua",
            "title": "使用Python写一个Telegram bot吧|Telegram bot教程",
            "date_modified": "2022-12-20T10:22:19.000Z",
            "date_published": "2024-01-14T09:13:19.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>又是一年冬季</h2>\n<p>很久没有往自己博客的&quot;日常&quot;文件夹里发过什么东西, 倒不如说这个网站本身已近一年未曾打理. 一是倦怠, 二是顾虑.</p>\n<p>倦怠了像写流水账一样记录自己无关痛痒的日常, 顾虑于现实中</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/mashed-potato-future/index",
            "title": "常轨脱离 Misanthrope",
            "date_modified": "2023-11-11T22:25:23.000Z",
            "date_published": "2023-11-16T22:40:23.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>安装docker</h2>\n<p>docker官方提供了傻瓜式安装脚本，为你做好所有工作，免去了手动安装的繁琐。</p>\n<p>本文实测系统环境：debian11</p>\n<p>执行以下命令</p>\n<p>::: tip 2023-03-07</p>\n<p>不知道从什么时候开始官方脚本已经默认也安装了 <code>docker compose</code>, 不需要后面的手动安装了, 因此已删除多余的内容</p>\n<p>也就是说, 只需要执行下面的一键脚本</p>\n<p>注意是 <code>docker compose</code> 而不是 <code>docker-compose</code>. 执行命令时候也没有这个杠</p>\n<p>:::</p>\n<pre><code class=\"language-shell\">curl -fsSL https://get.docker.com | bash -s docker\n</code></pre>\n<p>可在此命令后附带<code>--mirror</code>参数设置镜像源，以提高国内服务器下载docker的速度</p>\n<p>如使用阿里云镜像:</p>\n<pre><code class=\"language-shell\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n</code></pre>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/install-docker-one-key",
            "title": "使用官方脚本一键安装docker|安装docker-compose",
            "date_modified": "2022-04-20T14:29:38.000Z",
            "date_published": "2023-11-12T09:29:38.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>为了保证 gRPC 服务不被第三方监听和调用, 防止通信被篡改或伪造, 需要对 gRPC 服务添加身份验证机制.</p>\n<p>目前 gRPC 内置了三种身份验证机制:</p>\n<ul>\n<li><strong>SSL/TLS</strong>: gRPC 集成了 SSL/TLS, 提倡使用 SSL/TLS 对服务器进行身份验证, 并对客户端与服务器之间交换的所有数据进行加密。同时可选让客户端提供用于相互验证的证书.</li>\n<li><strong>基于 Token 的身份验证</strong>: gRPC 提供了一种可将基于元数据的凭证附加到请求和响应中的机制. 这种机制必须与 SSL/TLS 同时使用, 以提供完整的身份验证和加密通信.</li>\n<li><strong>ATLS</strong>: Google 自家的双向身份验证和传输安全系统, 通常也用于在 Google 家的平台上构建服务时.</li>\n</ul>\n<p>本文介绍 gRPC 中的 SSL/TLS.</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/grpc-and-protobuf-in-go-tls",
            "title": "Go 的 gRPC 和 Protocol Buffers---TLS 认证",
            "date_modified": "2023-10-23T09:29:29.000Z",
            "date_published": "2023-10-23T09:29:29.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>Protocol Buffers</h2>\n<p>Protocol Buffers (Protobuf) 是一种语言无关、平台无关、可扩展的序列化结构化数据的方法, 可以像 XML, json 等一样用于程序间数据通信. 而相较于上列二者, Protobuf 有更高的效率.</p>\n<p>使用 Protobuf 需要在 <code>.proto</code> 文件中定义数据结构, 并安装其编译器来生成对应语言的模型. 本文以 Go 为例.</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/grpc-and-protobuf-in-go-start",
            "title": "Go 的 gRPC 和 Protocol Buffers---Quick Start",
            "date_modified": "2023-10-21T21:27:48.000Z",
            "date_published": "2023-10-21T21:27:48.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>晚自习，教室里飞来一只蝴蝶。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/dairy-butterfly",
            "title": "蝴蝶",
            "date_modified": "2020-08-09T00:30:37.000Z",
            "date_published": "2023-08-11T00:30:37.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>忘了具体是在小学几年级的时候，家里抓回来了两三只小狗。也忘了是从哪里抓回来的，是怎么抓回来的，只依稀记得它们似乎没有妈妈。</p>\n<p>它们不到一个月大，身上都是白色的毛，就像当时冬季的雪，惹人可爱又可怜。爸</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/memory-dog",
            "title": "往事 · 小狗",
            "date_modified": "2020-08-18T00:17:55.000Z",
            "date_published": "2023-08-11T00:17:55.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>昨晚下午考试数学的时候开始头晕腰酸，我还以为是靠窗太阳晒+久坐导致的。晚上也吃不下去饭。一直到晚自习还是这样，挺到最后一节找来了温度计量了体温，39℃。</p>\n<p>然后去找老师请假，一边写着请假条，一边听着</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/diary-2021-12-16",
            "title": "diary-2021-12-16",
            "date_modified": "2021-12-16T23:59:43.000Z",
            "date_published": "2023-08-10T23:59:43.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p><s>感觉不如编译安装</s></p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/manage-python-version-by-conda",
            "title": "使用conda安装和管理python多版本环境",
            "date_modified": "2023-04-14T14:09:59.000Z",
            "date_published": "2023-04-14T14:09:59.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>Python 的环境管理确实烦,而且会出现版本之间不兼容的情况,所以有必要知道如何安装不同版本的 Python 并管理其环境.</p>\n<p>本文系统环境为 Debian11, 虚拟环境工具使用的是 venv, 采用编译安装的方法. Python 版本为 3.11.6</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/install-manage-python-version-on-linux/index",
            "title": "Debian/Linux安装最新Python版本及多版本环境管理",
            "date_modified": "2023-04-13T15:27:27.000Z",
            "date_published": "2023-04-13T15:27:27.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>什么是 JWT</h2>\n<p>JWT: JSON Web Tokens,它是一种将 JSON 对象编码为没有空格，且难以理解的长字符串的标准。在具体上,它就是一段字符串,下面就是 FastAPI 文档中给出的例子</p>\n<pre><code class=\"language-txt\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre>\n<p>抽象地把它看成是这样的</p>\n<pre><code class=\"language-txt\">aaaaaaaaaaaa.bbbbbbbbbbbb.cccccccccccc\n</code></pre>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/fastapi-jwt/index",
            "title": "JWT 认证及其在 FastAPI 中的使用",
            "date_modified": "2023-03-22T10:59:53.000Z",
            "date_published": "2023-03-22T10:59:53.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>什么是「依赖注入」 {lang=&quot;zh-CN&quot;}</h2>\n<h2>What is &quot;Dependency Injection&quot; {lang=&quot;en&quot;}</h2>\n<p>::: zh-CN</p>\n<blockquote>\n<p>编程中的「依赖注入」是声明代码（本文中为路径操作函数 ）运行所需的，或要使用的「依赖」的一种方式。</p>\n<p>然后，由系统（本文中为 FastAPI）负责执行任意需要的逻辑，为代码提供这些依赖（「注入」依赖项）。</p>\n<p>依赖注入常用于以下场景：</p>\n<ul>\n<li>共享业务逻辑（复用相同的代码逻辑）</li>\n<li>共享数据库连接</li>\n<li>实现安全、验证、角色权限等……</li>\n</ul>\n<p>上述场景均可以使用依赖注入，将代码重复最小化。<br>\n:::</p>\n</blockquote>\n<p>::: en</p>\n<blockquote>\n<p>&quot;Dependency Injection&quot; means, in programming, that there is a way for your code (in this case, your path operation functions) to declare things that it requires to work and use: &quot;dependencies&quot;.</p>\n<p>And then, that system (in this case FastAPI) will take care of doing whatever is needed to provide your code with those needed dependencies (&quot;inject&quot; the dependencies).</p>\n<p>This is very useful when you need to:</p>\n<ul>\n<li>Have shared logic (the same code logic again and again).</li>\n<li>Share database connections.</li>\n<li>Enforce security, authentication, role requirements, etc.</li>\n<li>And many other things...</li>\n</ul>\n<p>All these, while minimizing code repetition.<br>\n:::</p>\n</blockquote>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/fastapi-dependency-injection",
            "title": "FastAPI dependency injection system",
            "date_modified": "2023-03-15T13:30:34.000Z",
            "date_published": "2023-03-15T13:30:34.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>受不了啦，给笔记本装上 Arch 折磨自己！</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/archlinux-on-y9kp22-1",
            "title": "ArchLinux on Y9000P2022十分好用,就是有点难用",
            "date_modified": "2023-02-20T21:51:21.000Z",
            "date_published": "2023-02-20T21:51:21.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>最近 openai 的 <a href=\"https://chat.openai.com/chat\">ChatGPT</a> 有点小火，看了官方和民间的一些截图之后，感觉这东西确实有点意思，所以就想办法注册了个号来体验体验。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/ChatGPT-simple-exp/index",
            "title": "ChatGPT简单使用体验|你的下一个Google，何必是搜索引擎",
            "date_modified": "2022-12-05T20:47:50.000Z",
            "date_published": "2022-12-05T20:47:50.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>列表</h2>\n<h3>列表基础</h3>\n<pre><code class=\"language-py\">#创建列表\nfriends = ['ah','leao','zhang','wang']\nprint(friends)\n\n#访问列表元素\nprint(f</code></pre>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/py3-quick-basic",
            "title": "Python——列表、元组、字典、条件、循环、输入、函数",
            "date_modified": "2022-10-30T18:29:00.000Z",
            "date_published": "2022-10-30T18:29:00.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>最近把自家宽带从联通转战移动，然而移动不给公网ipv4，导致我mc服的铸币玩家们无法连接服务器，于是决定用zerotier 组建网络，一举多得.</p>\n<p>此文只介绍如何加入一个zerotier网络。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/zerotier-client/index",
            "title": "【如何加入一个zerotier网络",
            "date_modified": "2022-08-21T09:45:30.000Z",
            "date_published": "2022-08-21T09:45:30.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言</h2>\n<p>使用vscode写博客，要想便捷快速地在文章中插入图片，比较常见的一个做法是通过picgo+图床实现快捷键上传图片，并生成markdown格式的链接。图床常常是利用jsdelivr加速github仓库的方式搭建。</p>\n<p>我原本也一直是这样做的，但自从jsdelivr在国内不可用之后，（再者，jsdelivr的使用规范也不允许作为图床使用）我换用了另一种方案，即通过vs的pasteimage插件直接把图片粘贴在文章内，并保存在博客目录内。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/pasteimage-in-vs/index",
            "title": "在vscode里直接粘贴图片——pasteimage",
            "date_modified": "2022-07-07T09:16:30.000Z",
            "date_published": "2022-07-07T09:16:30.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>我最近买了一台二手主机当nas用, 但是由于我家的布局设置, 必须要把这台主机放置在离路由器较远的一个位置。所以我直接买了根超长网线 (指30m) 以防长度不够, 但是到手之后发现, 我严重高估了我所需的长度, 于是把这根长网线剪去一大段, 并去学会了接网线水晶头的操作。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/make-cable/index",
            "title": "自己动手制作网线水晶头",
            "date_modified": "2022-06-20T22:26:35.000Z",
            "date_published": "2022-06-20T22:26:35.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<p>想和基友们联机玩mc，相比于使用各种联机平台，或搭建虚拟局域网，不如自己直接开个服务器。既不用保持至少一人在线，又能避免玩游戏时需要额外运行一个联机程序的臃肿。</p>\n<p>本文记录博主自己的mc开服经历。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/mc-host-server/index",
            "title": "Minecraft开服入门",
            "date_modified": "2022-06-20T10:00:38.000Z",
            "date_published": "2022-06-20T10:00:38.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        },
        {
            "id": "",
            "content_html": "<h2>前言|为什么选择ACME方法</h2>\n<p>要想通过TLS/https协议访问自己域名下的服务, 就必须申请SSL证书。类似宝塔这种面板提供了简单快捷的方法一键申请, 但终究不是良好的解决方案。一来宝塔过于臃肿, 二来其需要手机实名验证。使用各大云服务商提供的【免费证书】则还需要登录网页、申请、导入证书, 未免操作繁琐。更何况这些云服务商提供的ssl证书只能给你很少的自由选择性。</p>\n<p>而ACME则很好地解决了这些问题。</p>\n<br/><p>访问 <a href=\"\" target=\"_blank\"></a> 阅读全文。</p>",
            "url": "https://krau.top/posts/acmessl/index",
            "title": "使用ACME脚本申请并配置SSL证书",
            "date_modified": "2022-04-22T16:48:01.000Z",
            "date_published": "2022-04-22T16:48:01.000Z",
            "author": {
                "name": "Krau",
                "url": "https://valaxy.site"
            }
        }
    ]
}